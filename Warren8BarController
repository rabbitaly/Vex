#pragma config(Sensor, in1,    rightLiftS,     sensorPotentiometer)
#pragma config(Sensor, in2,    progSel,        sensorPotentiometer)
#pragma config(Sensor, dgtl1,  rightBackS,     sensorQuadEncoder)
#pragma config(Sensor, dgtl3,  leftBackS,      sensorQuadEncoder)
#pragma config(Sensor, dgtl5,  bumper,         sensorTouch)
#pragma config(Motor,  port1,           rightBack,     tmotorVex393_HBridge, openLoop)
#pragma config(Motor,  port2,           rightFront,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           rightArmTop,   tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port4,           rightArmBottom, tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port5,           intakeRight,   tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           intakeLeft,    tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port7,           leftArmBottom, tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port8,           leftArmTop,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           leftFront,     tmotorVex393_MC29, openLoop, reversed)
#pragma config(Motor,  port10,          leftBack,      tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#include "SingVex2014FnLib.h";

int cubicMap(int x)
{
	return ((((x*3)/25)*((x*3)/25)*((x*3)/25)/27 + x/2)*2)/3;
}


task main()
{
	int arcade = 0;

	while(true)
	{
		if (vexRT[Btn8U] == 1)
		{ 
			arcade = 1;
		}
		else if (vexRT[Btn8D] == 1)
		{
			arcade = 0;
		}

		if (arcade == 1)
		{
			motor[leftBack] = cubicMap(vexRT[Ch3] + vexRT[Ch1]);
			motor[leftFront] = cubicMap(vexRT[Ch3] + vexRT[Ch1]);
			motor[rightBack] = cubicMap(vexRT[Ch3] - vexRT[Ch1]);
			motor[rightFront] = cubicMap(vexRT[Ch3] - vexRT[Ch1]);
		}
		else
		{
			motor[leftBack] = vexRT[Ch3];
			motor[leftFront] = vexRT[Ch3];
			motor[rightBack] = vexRT[Ch2];
			motor[rightFront] = vexRT[Ch2];
		}

		if (abs(vexRT[Ch2Xmtr2]) > 5)
		{
			motor[leftArmBottom] = cubicMap(vexRT[Ch2Xmtr2]);
			motor[leftArmTop] = cubicMap(vexRT[Ch2Xmtr2]);
			motor[rightArmBottom] = cubicMap(vexRT[Ch2Xmtr2]);
			motor[rightArmTop] = cubicMap(vexRT[Ch2Xmtr2]);
		}
		else if (vexRT[Btn6U] == 1)
		{
			motor[leftArmBottom] = 127;
			motor[leftArmTop] = 127;
			motor[rightArmBottom] = 127;
			motor[rightArmTop] = 127;
		}
		else if (vexRT[Btn6D] == 1)
		{
			motor[leftArmBottom] = -127;
			motor[leftArmTop] = -127;
			motor[rightArmBottom] = -127;
			motor[rightArmTop] = -127;
		}
		else
		{
			motor[leftArmBottom] = 0;
			motor[leftArmTop] = 0;
			motor[rightArmBottom] = 0;
			motor[rightArmTop] = 0;
		}

		if (abs(vexRT[Ch3Xmtr2]) > 5)
		{
			motor[intakeLeft] = vexRT[Ch3Xmtr2];
			motor[intakeRight] = vexRT[Ch3Xmtr2];
		}
		else if (vexRT[Btn5UXmtr2] == 1)
		{
			motor[intakeLeft] = 127;
			motor[intakeRight] = 127;
		}
		else if (vexRT[Btn5DXmtr2] == 1)
		{
			motor[intakeLeft] = -127;
			motor[intakeRight] = -127;
		}
		else if (vexRT[Btn5U] == 1)
		{
			motor[intakeLeft] = 127;
			motor[intakeRight] = 127;
		}
		else if (vexRT[Btn5D] == 1)
		{
			motor[intakeLeft] = -127;
			motor[intakeRight] = -127;
		}
		else
		{
			motor[intakeLeft] = 0;
			motor[intakeRight] = 0;
		}
	}
}
